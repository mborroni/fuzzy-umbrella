// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package users is a generated GoMock package.
package users

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockauthenticator is a mock of authenticator interface
type Mockauthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockauthenticatorMockRecorder
}

// MockauthenticatorMockRecorder is the mock recorder for Mockauthenticator
type MockauthenticatorMockRecorder struct {
	mock *Mockauthenticator
}

// NewMockauthenticator creates a new mock instance
func NewMockauthenticator(ctrl *gomock.Controller) *Mockauthenticator {
	mock := &Mockauthenticator{ctrl: ctrl}
	mock.recorder = &MockauthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockauthenticator) EXPECT() *MockauthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *Mockauthenticator) Authenticate(arg0 *User) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockauthenticatorMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*Mockauthenticator)(nil).Authenticate), arg0)
}

// Mockrepository is a mock of repository interface
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Mockrepository) Get(arg0 *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockrepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockrepository)(nil).Get), arg0)
}

// Save mocks base method
func (m *Mockrepository) Save(arg0 *User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockrepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockrepository)(nil).Save), arg0)
}
